substitutions:
  device_name: esphome-bathroom
  friendly_name: esphome-bathroom

esphome:
  name: esphome-bathroom
  platform: ESP32
  board: nodemcu-32s
  includes:
    - oras_dsh.h   # File is included in order to manage "global" data between the different sections of lambda code

# Enable logging
# If using DEBUG level, the BLE tracker will find MAC addresses and service uuid's of any digital shower heads, it can find
# INFO will include information on when shower head is connect/disconnected, BLE datablock changes and the update timestamp for the last datablock change
# WARN will just log information about start time and end time (and relevant info for time calculation)
logger:
  level: INFO

# Enable Home Assistant API
api:
  password: !secret esphome_api_password

ota:
  password: !secret esphome_ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: '.rg47c.lan'

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "DSH Fallback Hotspot"
    password: "ecEm5NbuUFfg"

captive_portal:

# Time component is needed for time calculations
time:
  - platform: homeassistant
    id: homeassistant_time


# Sensors for ESP version and WIFI information
text_sensor:
  - platform: version
    hide_timestamp: true
    name: '${friendly_name} - ESPHome Version'
  - platform: wifi_info
    ip_address:
      name: '${friendly_name} - IP Address'
      icon: mdi:wifi
    ssid:
      name: '${friendly_name} - Connected SSID'
      icon: mdi:wifi-strength-2
  - platform: template
    name: "dsh_lastShowerFinished"
    id: dsh_lastShowerFinished
    icon: mdi:calendar-clock
    update_interval: never


esp32_ble_tracker:
  scan_parameters:
    interval: 1100ms
    window: 1100ms
    active: true


  on_ble_advertise:
    - then:
      - lambda: |-
          char stringbuf[256];                             // Buffer for outputting raw data in a readable format               
          char* buf2 = stringbuf;                          // Pointer for buffer
          char* endofbuf = stringbuf + sizeof(stringbuf);  // Pointer to end of buffer
          int i;                                           // integer to be sued for counter

          if(strcmp(x.get_name().c_str(),"DHS") == 0) {    // Check manufacturer name
            ESP_LOGI("DSH_tracker", "New BLE device");
            ESP_LOGI("DSH_tracker", "  address: %s", x.address_str().c_str());
            ESP_LOGI("DSH_tracker", "(%s)  name: %s", x.address_str().c_str(), x.get_name().c_str());
            ESP_LOGI("DSH_tracker", "(%s)  Advertised service UUIDs:",x.address_str().c_str());
            for (auto uuid : x.get_service_uuids()) {
                ESP_LOGI("DSH_tracker", "(%s)    - %s", x.address_str().c_str(), uuid.to_string().c_str());
            }
            ESP_LOGI("DSH", "(%s)  Advertised service data:",x.address_str().c_str());
            for (auto data : x.get_service_datas()) {
                ESP_LOGI("DSH_tracker", "(%s)    - %s: (length %i)", x.address_str().c_str(), data.uuid.to_string().c_str(), data.data.size());
            }
            ESP_LOGI("DSH_tracker", "(%s)  Advertised manufacturer data:",x.address_str().c_str());
            for (auto data : x.get_manufacturer_datas()) {
              ESP_LOGI("DSH_tracker", "(%s)    - %s: (length %i)", x.address_str().c_str(), data.uuid.to_string().c_str(), data.data.size());
              for(i=0;i<18;i++) {
                if (buf2 + 5 < endofbuf) {
                    if (i > 0) {
                        buf2 += sprintf(buf2, ":");
                    }
                  buf2 += sprintf(buf2, "%02X", data.data[i]);                  
                }
              }
              ESP_LOGI("DSH_tracker", "(%s) Data block: %s", x.address_str().c_str(), (char*)stringbuf);

              // Detailed analysis of data - check if shower head is active (only works before connection is established with ble_client)
              if ( dsh.occupancy == 0 && data.data[14]==0x32 && data.data[15]==0x4F) {   // Enhance filtering on data - to ensure correct match
                auto time = id(homeassistant_time).now();        // Get current time
                time_t currTime = time.timestamp;

                unsigned long int totShowers = data.data[2];         // Total Showers consist of index 1 and 2 in the array
                unsigned long int bathTemp =  data.data[11];         // Temperature consist of index 11 in the array
                unsigned long int bathKwhDec= data.data[13];         // kWh consumptionm consist of index 12 and 13 in the array (multiplied by 100)
                unsigned long int bathLiter =  data.data[9];         // L consumptionm consist of index 8 and 9 in the array (multiplied by 100)

                dsh.tStartTime = time.timestamp;  // Set start time of shower
                ESP_LOGW("DSH_tracker", "Initializing start time to: %ld and setting occupancy on",time.timestamp);
                dsh.occupancy =1 ;

                totShowers += ( data.data[1]<<8);                   // Calculate shower number
                dsh.lCurrentShowerNo = totShowers;
                dsh.curBathTemp = bathTemp;
                bathKwhDec += ( data.data[12]<<8);                  // Get data for energy (16 bit number) - number must be divided by 100
                dsh.curEnergy = (float)bathKwhDec/100;
                bathLiter += ( data.data[8]<<8);                    // Get amount of water (16 bit number) - number must be divided by 10
                dsh.curWaterLiters = float(bathLiter)/10;
                if(memcmp(&dsh.bleData[0],&data.data[0],18)!=0) {   // If BLE data is different than what we have in the "cache", copy the new data
                  memcpy(&dsh.bleData[0],&data.data[0],18);     
                }
                ESP_LOGI("DSH_tracker", "Data block changes since last: %s", (char*)stringbuf);
                dsh.tLastUpdate = time.timestamp;                   // Set information about when data was last updated
                ESP_LOGI("DSH_tracker", "Timestamp for last update set to: %ld",time.timestamp);
                strftime(dsh.szLastShowerEnded, sizeof(dsh.szLastShowerEnded), "%Y-%m-%d %H:%M:%S", localtime(&currTime));
              }
            }
          }
          
# Timer running  on 5 sec interval - to ensure fairly quickly updates once the shower is active
interval:
  - interval: 5sec
    then:
      - lambda: |-
          // Get current time
          auto time = id(homeassistant_time).now();
          // ESP_LOGW("DSH", "Interval timer spawned");
          if ( (time.timestamp - dsh.tLastUpdate) > 180 && dsh.tLastUpdate != 0 ) {   // More than 180 seconds has passed since last update, assume finished
            unsigned long int showerDurationSecs = dsh.tLastUpdate - dsh.tStartTime;  // Calculate shower duration
            dsh.occupancy = 0;  // Set variable for shower as inactive
            ESP_LOGI("DSH", "3 minutes has passed since last updated - shower duration in seconds has been calculated to: %ld seconds",showerDurationSecs);
            // Publish LastShower sensors to HA
            id(dsh_lastShowerkWh).publish_state(dsh.curEnergy); 
            id(dsh_lastShowerTemp).publish_state(dsh.curBathTemp);
            id(dsh_lastShowerLiter).publish_state(dsh.curWaterLiters);
            id(dsh_lastShowerM3).publish_state((float)dsh.curWaterLiters*0.001);
            id(dsh_lastDurationSeconds).publish_state(showerDurationSecs);
            id(dsh_showerOccupied).publish_state(dsh.occupancy);
            id(dsh_lastShowerFinished).publish_state(dsh.szLastShowerEnded);
            // Update internal variables for historical lookup
            dsh.lastWaterLiters=dsh.curWaterLiters;
            dsh.lastEnergy=dsh.curEnergy;
            dsh.lastBathTemp=dsh.curBathTemp;
            dsh.lastShowerDuration=showerDurationSecs;
            // Set CurrentShower to NaN - as shower is inactive
            id(dsh_curShowerkWh).publish_state(NAN); 
            id(dsh_curShowerTemp).publish_state(NAN);
            id(dsh_curShowerLiter).publish_state(NAN);
            id(dsh_curShowerM3).publish_state(NAN);
            id(dsh_curShowerTimeSeconds).publish_state(NAN);

            // Reset internal counters and data
            ESP_LOGI("DSH", "Consider shower to be finished and reset Occupancy");
            dsh.tLastUpdate = 0;
            dsh.lLastShowerNo = dsh.lCurrentShowerNo;  // Set counter shower number - to be able to identify if current shower continues
          } else if ( dsh.tStartTime != 0 && dsh.occupancy==1 && dsh.tLastUpdate != 0) { 
            // Regular updates every 5 seconds when shower is on
            // Only send if more than 10 seconds since last update from BLE device
            unsigned long int showerDurationSecs = dsh.tLastUpdate - dsh.tStartTime;  // Calculate shower duration
            ESP_LOGW("DSH", "Updating HA sensors ... ");
            id(dsh_curShowerkWh).publish_state(dsh.curEnergy);
            id(dsh_curShowerTemp).publish_state(dsh.curBathTemp);
            id(dsh_curShowerLiter).publish_state(dsh.curWaterLiters);
            id(dsh_curShowerM3).publish_state((float)dsh.curWaterLiters*0.001);
            id(dsh_curShowerTimeSeconds).publish_state(showerDurationSecs);
            id(dsh_showerOccupied).publish_state(dsh.occupancy);
            id(dsh_totShowers).publish_state(dsh.lCurrentShowerNo);
          }


ble_client:
  - mac_address: 60:77:71:3A:D6:BB # Address needs to match shower head - 60:77:71:3A:D6:BB
    id: DSH
    on_connect:
      then:
        lambda: |- 
          auto time = id(homeassistant_time).now();
          ESP_LOGI("DSH", "Shower head connected ...");

    on_disconnect:
      then:
        lambda: |- 
          // In principle a disconnect only means that the shower head disabled BLE - it does not mean, that the shower is finished,
          // as there is a 2 minute timeout in the shower head
          auto time = id(homeassistant_time).now();
          ESP_LOGI("DSH", "Shower head disconnected - if no new data has been received after approx 3 minutes, the shower is considered finished");

# Sensor to indicate whether the shower is busy/occupied or not.
binary_sensor:
  - platform: template
    name: "dsh_showerOccupied"
    id: dsh_showerOccupied
    icon: 'mdi:shower-head'
    device_class: occupancy

sensor:
  # Total number of showers registered by the shower-head 
  - platform: template
    name: "dsh_totShowers"
    id: dsh_totShowers
    icon: 'mdi:speedometer-medium'
    unit_of_measurement: "#"
    update_interval: never

  # Current temperature
  - platform: template
    name: "dsh_curShowerTemp"
    id: dsh_curShowerTemp
    icon: 'mdi:thermometer'
    device_class: temperature
    update_interval: never
    unit_of_measurement: "°C"

  # Previous temperature
  - platform: template
    name: "dsh_lastShowerTemp"
    id: dsh_lastShowerTemp
    icon: 'mdi:thermometer'
    device_class: temperature
    update_interval: never
    unit_of_measurement: "°C"

  # Current energy usage in kwH
  - platform: template
    name: "dsh_curShowerkWh"
    id: dsh_curShowerkWh
    device_class: energy
    icon: 'mdi:water-thermometer'
    accuracy_decimals: 2
    unit_of_measurement: "kWh"
    update_interval: never

  # Current energy usage in kwH
  - platform: template
    name: "dsh_lastShowerkWh"
    id: dsh_lastShowerkWh
    device_class: energy
    icon: 'mdi:water-thermometer'
    accuracy_decimals: 2
    unit_of_measurement: "kWh"
    update_interval: never

  # Current duration 
  - platform: template
    name: "dsh_curShowerTimeSeconds"
    id: dsh_curShowerTimeSeconds
    icon: 'mdi:timer'
    unit_of_measurement: "s"
    update_interval: never

  # Last duration 
  - platform: template
    name: "dsh_lastDurationSeconds"
    id: dsh_lastDurationSeconds
    icon: 'mdi:timer'
    unit_of_measurement: "s"
    update_interval: never

  # Current water consumption in Liter
  - platform: template
    name: "dsh_curShowerLiter"
    id: dsh_curShowerLiter
    device_class: water
    icon: 'mdi:water'
    unit_of_measurement: "L"
    accuracy_decimals: 1
    update_interval: never

  # Last water consumption in Liter
  - platform: template
    name: "dsh_lastShowerLiter"
    id: dsh_lastShowerLiter
    device_class: water
    icon: 'mdi:water'
    unit_of_measurement: "L"
    accuracy_decimals: 1
    update_interval: never

  # Current water consumption in m³
  - platform: template
    name: "dsh_curShowerM3"
    id: dsh_curShowerM3
    device_class: water
    icon: 'mdi:cup-water'
    unit_of_measurement: "m³"
    accuracy_decimals: 5
    update_interval: never

  # Last water consumption in m³
  - platform: template
    name: "dsh_lastShowerM3"
    id: dsh_lastShowerM3
    device_class: water
    icon: 'mdi:cup-water'
    unit_of_measurement: "m³"
    accuracy_decimals: 5
    update_interval: never

  # Total number of showers - this is where the magic happens
  - platform: ble_client
    name: "DSH Total Showers"
    ble_client_id: DSH
    id: dsh_totalShowers
    update_interval: never
    internal: true
    type: characteristic
    service_uuid: '7f402200-504f-4c41-5261-6d706869726f'        # Not sure if these are the same on all shower heads - as I only have a single showerhead
    characteristic_uuid: '7f402203-504f-4c41-5261-6d706869726f' #
    notify: true  # Enable notifications on the service/charateristic

    lambda: |-
      auto time = id(homeassistant_time).now();        // Get current time
      time_t currTime = time.timestamp;                // Struct to generate human readable date/timestamp
      char stringbuf[256];                             // Buffer for outputting raw data in a readable format               
      char* buf2 = stringbuf;                          // Pointer for buffer
      char* endofbuf = stringbuf + sizeof(stringbuf);  // Pointer to end of buffer
      int i;                                           // integer to be sued for counter
      uint8_t* pdata = (uint8_t*) x.data();            // The BLE data array
      unsigned long int totShowers = pdata[2];         // Total Showers consist of index 1 and 2 in the array
      unsigned long int bathTemp =  pdata[11];         // Temperature consist of index 11 in the array
      unsigned long int bathKwhDec= pdata[13];         // kWh consumptionm consist of index 12 and 13 in the array (multiplied by 100)
      unsigned long int bathLiter =  pdata[9];         // L consumptionm consist of index 8 and 9 in the array (multiplied by 10)

      totShowers += ( pdata[1]<<8);
      // ESP_LOGD("ble_adv", "Total showers %ld", totShowers);
      dsh.lCurrentShowerNo = totShowers;

      // Only reset counters when a new shower being started - as it can have paused. This can be identified by the shower number 
      // retrieved from the BLE data
      if(dsh.occupancy == 0 && dsh.lLastShowerNo != dsh.lCurrentShowerNo) { 
        dsh.tStartTime = time.timestamp;  // Set start time of shower
        ESP_LOGW("DSH", "Initializing start time to: %ld and setting occupancy on",time.timestamp);
        id(dsh_curShowerkWh).publish_state(0);
        id(dsh_curShowerTemp).publish_state(0);
        id(dsh_curShowerLiter).publish_state(0);
        id(dsh_curShowerM3).publish_state(0);
        id(dsh_curShowerTimeSeconds).publish_state(0);
        memset(&dsh.bleData[0],0,sizeof(dsh.bleData));        // Zeroize data block buffer
        dsh.occupancy = 1;                                    // Set shower as active/occupied
        id(dsh_showerOccupied).publish_state(dsh.occupancy);  // Publish sensor to HA
      }

      dsh.curBathTemp = bathTemp;
      // ESP_LOGD("ble_adv", "Bath temperature %ld", dsh.curBathTemp);

      bathKwhDec += ( pdata[12]<<8);
      dsh.curEnergy = (float)bathKwhDec/100;
      // ESP_LOGD("ble_adv", "Bath Energy %f kWh", dsh.curEnergy);

      bathLiter += ( pdata[8]<<8);
      dsh.curWaterLiters = float(bathLiter)/10;
      // ESP_LOGD("ble_adv", "Bath water consumption %f L", dsh.curWaterLiters);

      // Find out if data has changed compared to previous notification
      if(memcmp(&dsh.bleData[0],pdata,18)!=0) {
        // Data is different, copy new data
        memcpy(&dsh.bleData[0],pdata,18);
        // Dump hex data to the log
        for(i=0;i<18;i++) {
          if (buf2 + 5 < endofbuf) {
              if (i > 0) {
                  buf2 += sprintf(buf2, ":");
              }
            buf2 += sprintf(buf2, "%02X", pdata[i]);                  
          }
        }
        ESP_LOGI("DSH", "Data block changes since last: %s", (char*)stringbuf);
        // Set information about when data was last updated
        dsh.tLastUpdate = time.timestamp;
        ESP_LOGI("DSH", "Timestamp for last update set to: %ld",time.timestamp);
        strftime(dsh.szLastShowerEnded, sizeof(dsh.szLastShowerEnded), "%Y-%m-%d %H:%M:%S", localtime(&currTime));
        // sprintf((char *)dsh.szLastShowerEnded, "%04d-%02d-%02d %02d:%02d:%02d", time.year,time.month,time.day_of_month,time.hour,time.minute,time.second);
      }
      return(totShowers);

